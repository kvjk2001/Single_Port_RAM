class driver extends uvm_driver #(sequence_item);

`uvm_component_utils(driver)

	virtual intf.mp_driver vif;

	uvm_blocking_put_port #(packet) drv2ref;

function new(string name = "driver", uvm_component parent)
	super.new(name, parent);
endfunction

function void build_phase(uvm_phase phase);
	super.build_phase(phase);
	
	if(!`uvm_config_db #(virtual intf) :: get (this, "", "vif", vif))
	begin
		`uvm_fatal("driver", "Unable to get the virtual interface");
	end

	drv2ref = new("drv2ref", this);

endfunction

task run_phase(uvm_phase phase);
	sequence_item packet;

	repeat(1)
	begin
		seq_item_port.next_item_done(packet);
		drive();
		drv2ref.put(packet);
		seq_item_port.item_done();		

	end
endtask

task run();
	@(posedge vif.cb_driver)
	begin
		vif.cb_driver.data_in <= packet.data_in;
	end

endtask

endclass
